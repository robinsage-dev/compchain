class DateFormField extends FormField
{
    constructor(...args)
    {
        super(...args);
        this.enableTime = false;
    }
    renderInput(value) {

        if (value == null && !this.isMutable())
        {
            var display = this._getDefaultString();
            return h('div', [
                h('i.fa.fa-calendar', {
                    attrs: {
                        "aria-hidden": true
                    },
                    style: {
                        marginRight: '10px'
                    }
                }),
                h('input.calendarInput', {
                    props: {
                        disabled: true,
                        value: display,
                        type: 'text',
                    }
                })
            ]);
        }

        let d = value;//isNaN(value) ? new Date(value) : new Date(parseInt(value));

        let momentFormat = "MM/DD/Y";
        if (this.enableTime)
        {
            momentFormat = "MM/DD/Y h:mm A"
        }

        d = moment(value).format(momentFormat);
        //d = flatpickr.prototype.formatDate(d, "m/d/Y h:i K");

        let stamp = isNaN(value) ? '' : '1';
        return h('div', [
            h('i.fa.fa-calendar', {
                attrs: {
                    "aria-hidden": true
                },
                style: {
                    marginRight: '10px'
                }
            }),
            h('input.calendarInput', {
                props: {
                    name: this.formName(),
                    id: 'f_'+this.key,
                    value: d,
                    disabled: !this.isMutable(),
                },
                on: {
                    change: this.onChangeDate
                },
                attrs: {
                    stamp,
                },
                hook: {
                    insert: (vnode) =>
                    {
                        let dateFormat = "m/d/Y";
                        if (this.enableTime)
                        {
                            dateFormat = "m/d/Y h:i K";
                        }
                        vnode.elm.flatpickr({
                            dateFormat: dateFormat,
                            enableTime: Boolean(this.enableTime)
                        });
                    }
                }
            })
        ]);
    }

    renderValue(value) {
        if (value != null && !(value instanceof Date)) {
            value = new Date(value);
        }
        if (value == null || value.toString() === 'Invalid Date') {
            return this._getDefaultString();
        }

        if (this.enableTime) {
            return value.toLocaleDateString() + ' ' + value.toLocaleTimeString();
        }

        return value.toLocaleDateString();
    }

    _getDefaultString() {
        let display = 'Unknown';
        if (this.attr.defaultDisplay)
        {
            display = this.attr.defaultDisplay;
        }

        return display;
    }
}

class DateTimeFormField extends DateFormField
{
    constructor(...args)
    {
        super(...args);
        this.enableTime = true;
    }
}

RBForm.registerFieldType('time:date', DateFormField);
RBForm.registerFieldType('time:datetime', DateTimeFormField);
