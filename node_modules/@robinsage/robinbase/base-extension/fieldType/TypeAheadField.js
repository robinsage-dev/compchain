class TypeAheadField extends FormField {
    constructor(parentNode, key, attr, initialValue, colW) {
        initialValue = initialValue || '';
        super(parentNode, key, attr, initialValue, colW);

        this.loaded = false;
        this.selectField = null;
        this.inputField = null;
        this.elem = null;
        this.queryLink = attr.queryLink;
        this.options = null;
        this.initialLabel = null;
        this.typeTimeout = null;
        if (attr.queryLinkMap)
        {
            this.queryLink = replaceStr(attr.queryLink, attr.queryLinkMap, this.getForm().objData);
        }


        this.load(initialValue);
    }

    renderInput(value = '') {
        var self = this;

        if (this.attr.queryLinkMap)
        {
            const newQueryLink = replaceStr(this.attr.queryLink, this.attr.queryLinkMap, this.getForm().objData);
            if (newQueryLink !== this.queryLink)
            {
                this.loaded = false;
                this.queryLink = newQueryLink;
                this.load(value);
                this.sendValueUpdate(value);
            }
        }

        return this.loaded ? this.elem : this.renderLoadingMessage();
    }

    load(value) {
        if (this.attr.queryLink)
        {
            let useQueryLink = this.queryLink;
            if (!this.isMutable())
            {
                const joinChar = useQueryLink.indexOf('?') > -1 ? '&' : '?';
                useQueryLink += `${joinChar}selected=${value}`;
            }

            console.log('USE QUERY LINK:', useQueryLink);

            const processData = (data) => {
                let values = (this.attr.values || []).concat(data.data);
                let attr = Object.assign({}, this.attr, {values});

                let TextFormField = RBForm.getFieldType('text');
                var attrInput = Object.assign({}, attr);
                console.log(attrInput, attr);
                delete attrInput.values;

                var useValue =  this.initialValue;


                attrInput.listKey = this.key+'-list';

                let displayLabel = '';
                const renderValue = (valueDef) => {
                    if (!Array.isArray(valueDef) && typeof valueDef === 'object') {

                        console.log('RENDERING OPT GROUPS:' ,valueDef);
                        // optgroup
                        const label = valueDef.label || '';
                        const values = valueDef.values || [];
                        return h('optgroup', {
                            props: {
                                label,
                            }
                        }, values.map(renderValue));
                    }

                    if (!Array.isArray(valueDef))
                    {
                        valueDef = [valueDef, valueDef];
                    }

                    const [val, ...labels] = valueDef;
                    const selected = val == value;
                    if (selected == true)
                    {
                        displayLabel = labels[0];
                        if (this.initialLabel == null)
                        {
                            this.initialLabel = displayLabel;
                        }
                    }

                    var option = $(document.createElement('div'));
                    option.attr('value', val);
                    option.addClass('dropdownOption');
                    option.text(labels.join(' - '));
                    option.on('mousedown', {key:this.key, self:this}, function(e){
                        $('#f_'+e.data.key).val($(e.currentTarget).attr('value'));
                        $('#fD_'+e.data.key).val($(e.currentTarget).text());
                        e.data.self.initialLabel = $(e.currentTarget).text();
                        $('#fDD_'+e.data.key).remove();
                    });
                    return option;
                }
                console.log('this.attr.values', this.attr.values);
                this.options = values.map(renderValue);

                /*if (displayLabel == '')
                {
                    value = '';
                }*/
                if (typeof this.getForm().objData.__dk__ == 'string')
                {
                    displayLabel = this.getForm().objData.__dk__;
                }


                this.elem = h('div', {},
                    [
                        h('input', {
                            props: {
                                name: this.formName(),
                                id: 'f_'+this.key,
                                type: 'hidden',
                                value: value,
                                disabled: !this.isMutable(),

                            },
                            /*style:{
                                display:'none',
                            },*/
                            on: {
                                change: (e) => {
                                    this.onChange(e);
                                }
                            }
                        }),
                        h('input', {
                            props: {
                                name: this.formName()+'_D',
                                id: 'fD_'+this.key,
                                type: 'text',
                                value: displayLabel,
                                disabled: !this.isMutable(),
                                autocomplete: 'off'
                            },
                            on: {
                                focusout:(e) => {
                                   setTimeout(()=>{
                                       $('#fDD_'+this.key).remove();
                                       $('#fD_'+this.key).val(this.initialLabel);
                                   }, 5);
                                },
                                click: (e) => {
                                    e.target.setSelectionRange(0, this.valueFromEvent(e).length)
                                },
                                keyup: (e) => {
                                    this.typeTimeout = null;
                                    setTimeout(()=>{
                                        this.getForm().objData.__dk__ = this.valueFromEvent(e);
                                        useQueryLink = replaceStr(this.attr.queryLink, this.attr.queryLinkMap, this.getForm().objData);
                                        loadNext(true);
                                    }, 1000);

                                    //this.onChange(e);
                                }
                            }
                        }),
                        //h('div', {}, options)
                    ]
                );


                this.loaded = true;
                this.update();
            }


            const loadNext = (_displayDropDown) =>
            {
                if (TypeAheadField.queryCache.has(useQueryLink)) {
                    TypeAheadField.queryCache.get(useQueryLink).onValue(processData);
                    if (_displayDropDown == true)
                    {
                        displayDropdown();
                    }
                } else {
                    var futureValue = new FutureValue;

                    TypeAheadField.queryCache.set(useQueryLink, futureValue);
                    futureValue.onValue(processData);

                    $.get(useQueryLink, (data) => {

                        try
                        {
                            //data = JSON.parse(data);
                            console.log('data', useQueryLink, data);
                            futureValue.setValue(data);
                            if (_displayDropDown == true)
                            {
                                displayDropdown();
                            }
                        }
                        catch (e)
                        {
                            console.log('Error parsing data', e);
                            // show error
                        }
                    });
                }
            }
            const displayDropdown = () =>
            {
                $('#fDD_'+this.key).remove();
                var dropDownDiv = $(document.createElement('div'));
                dropDownDiv.addClass('dropdownBox');
                var currentTarget = $('#fD_'+this.key);
                dropDownDiv.attr('id', 'fDD_'+this.key);
                dropDownDiv.css('width', currentTarget.width());
                dropDownDiv.css('left', currentTarget.offset().left);
                dropDownDiv.css('top', currentTarget.offset().top + currentTarget.outerHeight());
                dropDownDiv.append(this.options);
                var docH = $( document ).height();
                $('body').append(dropDownDiv);
                var topY = currentTarget.offset().top + currentTarget.outerHeight();
                var dDh = dropDownDiv.outerHeight();



                console.log('topY', topY, dDh, docH);
                if (topY + dDh > docH)
                {
                    var diff = docH - (topY + dDh);
                    //if (diff < -150)
                   // {
                        dropDownDiv.css('top', currentTarget.offset().top - dDh );
                   /* }
                    else
                    {
                        dropDownDiv.css('max-height', (dDh + diff) );
                    }*/


                }


            }

            loadNext();

        } else {
            console.warn('missing query link');
        }



    }


}

TypeAheadField.queryCache = new Map();

class FutureValue {
    constructor() {
        this.listeners = [];
        this.resolved = false;
    }

    setValue(value) {
        this.value = value;
        this.resolved = true;
        this.listeners.forEach((l) => {
            l(value);
        });

        this.listeners = [];
    }

    onValue(listener) {
        if (this.resolved) {
            listener(this.value);
        } else {
            this.listeners.push(listener);
        }
    }
}

RBForm.registerFieldType('typeahead', TypeAheadField);
