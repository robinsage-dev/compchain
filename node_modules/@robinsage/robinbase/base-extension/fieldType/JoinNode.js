const PathFinder = require_robinbase('base:service:util:PathFinder');

class JoinNode extends FormNode {
    constructor(parentNode, key, attr, initialValue, colW) {
        super(parentNode, key, attr);
        this.colW = colW;
        this.initialValue = initialValue;

        if (Array.isArray(initialValue))
        {
            this.initialValue = {};
            initialValue.forEach((objData) => {
                this.initialValue[objData._id] = objData;
            });

            this.sendValueUpdate(this.initialValue);
        };

        this.buildSubForms();

        this.onAddItemClick = this.onAddItemClick.bind(this);
        this.onDragItemStart = this.onDragItemStart.bind(this);

        this.deletedKeys = [];

        this.confirmingDeletions = {};

        this.getRootForm().on('updateValue', (key, value) => {
            if (key === this.key) {
                this.initialValue = value;
                this.childNodes = [];
                this.buildSubForms();

            }
        })
    }

    buildSubForms() {
        const initialValue = this.initialValue || {};
        Object.keys(initialValue).forEach((key) => {
            this.buildSubForm(initialValue[key], false);
        });
    }

    buildSubForm(objData, isNew = false) {
        const rootForm = this.getRootForm();
        const key = `${this.key}.${objData._id}`;
        const deleteAction = this.attr.canBeDeleted ? this.onItemDeleteClick.bind(this, key) : null;
        const deleteConfirmAction = this.attr.canBeDeleted ? this.onItemDeleteConfirmClick.bind(this, key) : null;
        const subTemplate = Object.assign({}, this.attr.subTemplate, {
            _attributes: this.attr.subTemplate._attributes || {},
            formLayouts: this.attr.subLayouts,
            isNew,
            deleteAction,
            deleteConfirmAction
        });
        if (this.attr.immutable == true) {
            const newAttrs = {};
            Object.keys(subTemplate._attributes).forEach((attrKey) =>
            {
                newAttrs[attrKey] = Object.assign({}, subTemplate._attributes[attrKey], {immutable: true});
            });

            subTemplate._attributes = newAttrs;
            subTemplate.deleteAction = null;
            subTemplate.deleteConfirmAction = null;
        }
        let subForm = new RBForm(this, subTemplate, objData, rootForm, key + '.');

        this.append(subForm);

        if(isNew)
        {
            rootForm.updateValue(key, objData);
        }
    }

    render(value) {
        return h('div.inputContainer.joinContainer', {
            style: {
                width: this.colW == null ? '100%' : `${this.colW}%`,
                display: this.hidden() ? 'none' : 'inline-block',
            }
        }, this.renderJoinWell(value));
    }

    renderJoinWell(value) {
        // console.log('JOIN WELL VALUE: ', value);
        let children = [this.renderChildSections(value)];
        if (this.attr.label) {
            children = [h('h3', {
                style: {
                    marginTop: '0px',
                    marginBottom: '10px',
                    background: 'none'
                }
            }, [this.attr.label])].concat(children);
        }

        if (this.attr.canBeDeleted == true && !this.attr.immutable)
        {
            children.push(this.renderAddItemButton());
        }

        return h('div.well.inner-well', {
            style: {
                maxHeight: this.attr.maxHeight || 'auto',
                overflowY: 'scroll',
            }
        }, children);
    }

    renderChildSections(value = {}) {
        const rootForm = this.getRootForm();
        const childNodes = this.childNodes.slice();
        if (this.attr.sortKey)
        {
            const sortDir = String(this.attr.sortDir).toLowerCase() === 'desc' ? -1 : 1;
            console.log('sorting: ', this.attr.sortKey, childNodes);
            const sortKey = this.attr.sortKey;
            childNodes.sort((l, r) =>
            {
                const lVal = parseFloat(PathFinder.lookup(rootForm.calculateValue(l.key), sortKey));
                const rVal = parseFloat(PathFinder.lookup(rootForm.calculateValue(r.key), sortKey));

                if (lVal < rVal)
                {
                    return -1 * sortDir;
                }
                else if (rVal < lVal)
                {
                    return sortDir;
                }
                return 0;
            })
        }
        return h('div', {

        }, childNodes.map((form) => h('div.subSection', {
            "class": {
                subSectionNew: form.formData.isNew
            },
            attrs: {
                // subSectionKey: null
                reorderKey:form.objData._id
            },
        }, [form.render(value[form.objData._id])].concat(
                (this.attr.canBeReordered && this.attr.sortKey && !this.attr.immutable) ? [this.renderChildSectionReorderButton(form)] : []
            ).concat(
                (this.attr.canBeDeleted && !this.attr.immutable) ? [this.renderChildSectionDeleteButton(form)] : []
            )
        ))
          .concat(this.renderDeletedChildSections()));
    }

    renderDeletedChildSections() {
        // TODO
        return this.deletedKeys.map((key) => h('input', {
            props: {
                type: 'hidden',
                name: FormNode.keyToFormName(`${key}-DEL`),
                value: '',
            },
            attrs: {
                deleter: 'yes'
            }
        }));
    }

    renderAddItemButton() {
        return h('div.add', {
            on: {
                click: this.onAddItemClick
            }
        }, [h('i.fa.fa-plus-circle', {attrs: {'aria-hidden': "true"}})]);
    }

    renderChildSectionReorderButton(form) {
        const confirming = this.confirmingDeletions[form.key];
        return h('div', {
            class: {
                inlineDragger: true,
            },
            attrs: {
                dragKey: form.key
            },
            style: {
                textAlign: 'right',
                height: '100%',
                display: 'inline-block',
                position: 'absolute',
                width:'10px',
                cursor:'ns-resize',
                boxShadow:'inset -3px 0px 4px rgb(239, 239, 239)',
                left: '-10px',
                top: '0px',
            },
            on: {
                mousedown: this.onDragItemStart
            }
        }, []);
    };

    renderChildSectionDeleteButton(form) {
        const confirming = this.confirmingDeletions[form.key];
        return h('div', {
            style: {
                textAlign: 'right',
                height: '41px',
                display: 'inline-block',
                position: 'absolute',
                width:'150px',
                pointerEvents:'none',
                left: 'calc(100% - 153px)',
                top: '0px',
            }
        }, [
            h('div.delete', {
                style: {
                    float: 'none',
                    display: confirming ? 'none' : 'inline-block',
                    opacity: '0',
                    transition: 'opacity 1s',
                    delayed: {opacity: confirming ? '0' : '1'}
                },
                on: {
                    click: form.formData.deleteAction
                }
            }, [
                h('i.fa.fa-times', {attrs: {'aria-hidden': "true"}})
            ]),
            h('div.delete', {
                style: {
                    float: 'none',
                    display: confirming ? 'inline-block' : 'none',
                    opacity: '0',
                    borderRadius:'8px',
                    padding:'5px',
                    backgroundColor:'#fff',
                    boxShadow:'0px 0px 10px #fff',
                    transition: 'opacity 1s',
                    fontSize:'13px',
                    delayed: {opacity: confirming ? '1' : '0'}
                },
                on: {
                    click: form.formData.deleteConfirmAction
                }
            }, [
                h('i.fa.fa-exclamation-triangle', {attrs: {'aria-hidden': 'true'}}),
                " Are you sure?"
            ])
        ]);
    }

    onAddItemClick(e) {
        const id = `${guid('xxxxxxxx')}-NEW`;
        const objData = Object.assign({}, clone(this.attr.defaultObject || {}), {_id: id});
        this.buildSubForm(objData, true);

        this.update();
    }

    onDragItemStart(event, target) {
        var self = this;
        console.log('drag start', event, target);
        $('#floater').remove();
        var topPosY = $(target.elm.parentElement).offset().top;
        $(target.elm.parentElement).css('user-select', 'none');
        var currSelection = $(target.elm.parentElement);
        var topSection = $(target.elm.parentElement.parentElement);
        var keyField = $(target.elm).attr('dragKey');
        var dragDisplay = $(target.elm.parentElement).clone(false);
        dragDisplay.css('background-color', '#fff');
        dragDisplay.find('.delete').remove();
        dragDisplay.find('.inlineDragger').css('box-shadow', 'none');
        dragDisplay.find('.inlineDragger').css('background-color', '#007db1');
        dragDisplay.css('box-shadow', '0px 4px 0px rgba(0,0,0,0.1)');
       // dragDisplay.css('opacity', 0.5);
        dragDisplay.css('position', 'absolute');
        dragDisplay.css('width', $(target.elm.parentElement).outerWidth());
        dragDisplay.css('left', $(target.elm.parentElement).offset().left);
        dragDisplay.css('pointer-events', 'none');
        dragDisplay.css('z-index', 10);
        dragDisplay.css('top', topPosY);
        dragDisplay.attr('id', 'floater');
        dragDisplay.addClass('editArea');
        dragDisplay.css('padding-top', '6px');
        dragDisplay.css('padding-bottom', '6px');
        dragDisplay.css('padding-right', '24px');
        dragDisplay.css('border-bottom', '1px dashed #efefef');
        dragDisplay.css('font-size', '11px');
        dragDisplay.css('box-sizing', 'border-box');
        dragDisplay.find('input').css('font-size', '12px');
        dragDisplay.find('select').css('font-size', '12px');
        dragDisplay.find('.inputContainer').css('padding-bottom', '5px');
        $('body').append(dragDisplay);

        console.log('rootForm?', this.initialValue);

        $(document).mouseup(function(e){
            $('#floater').remove();
            $(document).unbind('mousemove');
        });

        $(document).mousemove({offset:null,
            topPos:topPosY,
            _topSection:topSection,
            _lastY:0,
            _currSelection:currSelection,
            _keyField:keyField,
            _self:this,
            _lastHeights:[],
            _topSection:topSection}, function(e){
            var oH = $('#floater').outerHeight();
            var sortDir = String(e.data._self.attr.sortDir).toLowerCase() === 'desc' ? -1 : 1;
            if (e.data.offset == null)
            {
                console.log('_topSection', e.data._topSection.offset().top);
                e.data.offset = e.pageY - e.data.topPos;
            }

            var useY = e.pageY - e.data.offset;
            if (useY < e.data._topSection.offset().top)
            {
                useY = e.data._topSection.offset().top;
            }
            if (useY > (e.data._topSection.offset().top + e.data._topSection.outerHeight()) - oH)
            {
                useY = (e.data._topSection.offset().top + e.data._topSection.outerHeight()) - oH;
            }

            var goingDown = false;
            if (useY > e.data._lastY)
            {
                goingDown = true;
            }


            $('#floater').css('top', useY);

            e.data._lastY = useY;


            var heights = [];
            var useKey = e.data._keyField.replace(/^[^\.]+\./, '');
            e.data._topSection.find('.subSection').each(function(index, item){
                var itemKey = $(item).attr('reorderKey');
                if (useKey !== itemKey)
                {
                    var nextOffset =  ($(item).outerHeight());
                    if (goingDown === true)
                    {
                        nextOffset = 0;//- ($(item).outerHeight());
                    }
                    heights.push({y:$(item).offset().top + nextOffset, oY:$(item).offset().top, key:itemKey});
                }
            });
            heights.push({y:useY + (oH*0.5), key:e.data._keyField.replace(/^[^\.]+\./, '')});

            heights.sort(function(a,b){
               if (a.y > b.y)
               {
                   return -1 * sortDir;
               }
               else if (a.y < b.y)
               {
                   return sortDir;
               }
               else
               {
                   return 0;
               }
            });

            var heightSum = '';

            var iter2 = heights.length;
            for (var i=0; i<heights.length; i++)
            {
                heightSum += heights[i].key;
            }

            if (heightSum !== e.data._lastHeights)
            {
                for (var i=0; i<heights.length; i++)
                {
                    e.data._self.getRootForm().updateValue(e.data._self.key+'.'+heights[i].key+'.'+e.data._self.attr.sortKey, iter2);
                    iter2 += -1;
                }
                e.data._self.update();
                console.log('do update');
                e.data._lastHeights = heightSum;
            }


        });

    }

    onItemDeleteClick(key, e) {
        // console.log('DELETED: ', key);
        this.confirmingDeletions[key] = true;
        setTimeout(() => {
            if (this.confirmingDeletions[key]) {
                this.confirmingDeletions[key] = false;
                this.update();
            }
        }, 5000);

        this.update();
    }

    onItemDeleteConfirmClick(key, e) {
        this.childNodes = this.childNodes.filter((form) => {
            return form.key !== key;
        });

        this.confirmingDeletions[key] = false;

        if (key.indexOf('-NEW') === -1) {
            this.deletedKeys.push(key);
        }

        this.getRootForm().updateValue(key, undefined);

        this.update();
    }

    resetData(newData) {
        console.log('RESETTING JOIN NODE DATA', this.key, newData);
        const rootForm = this.getRootForm();
        this.initialValue = newData;
        this.deletedKeys = [];

        this.childNodes = [];

        this.buildSubForms();
        //this.sendValueUpdate(this.initialValue);



        // if (Array.isArray(newData))
        // {
        //     this.childNodes = [];
        //     this.initialValue = {};
        //     initialValue.forEach((objData) => {
        //         this.initialValue[objData._id] = objData;
        //     });
        //
        //     this.sendValueUpdate(this.initialValue);
        // };

        // this.childNodes.forEach((child) => {
        //     child.formData.isNew = false;
        //     if (child.key.indexOf('-NEW') > -1) {
        //         console.log('NEW CHILD KEY: ', child.key);
        //         console.log('NEW CHILD VALUE: ', rootForm.getValue(child.key));
        //     }
        //     child.resetData(rootForm.getValue(child.key));
        // });
    }
}

RBForm.registerFieldType('join', JoinNode);
