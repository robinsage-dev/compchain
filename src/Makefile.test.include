# Copyright (c) 2013-2016 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

bin_PROGRAMS += test/test_compchain
noinst_PROGRAMS += test/test_compchain_fuzzy
TEST_SRCDIR = test
TEST_BINARY=test/test_compchain$(EXEEXT)

JSON_TEST_FILES = \
  test/data/base58_encode_decode.json \
  test/data/key_io_valid.json \
  test/data/key_io_invalid.json \
  test/data/script_tests.json \
  test/data/sighash.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json

RAW_TEST_FILES =

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

COMPCHAIN_TEST_SUITE = \
  test/test_compchain_main.cpp \
  test/test_compchain.h \
  test/test_compchain.cpp

# test_compchain binary #
COMPCHAIN_TESTS =\
  test/arith_uint256_tests.cpp \
  test/scriptnum10.h \
  test/addrman_tests.cpp \
  test/amount_tests.cpp \
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bech32_tests.cpp \
  test/bip32_tests.cpp \
  test/blockchain_tests.cpp \
  test/blockencodings_tests.cpp \
  test/bloom_tests.cpp \
  test/bswap_tests.cpp \
  test/checkqueue_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/cuckoocache_tests.cpp \
  test/denialofservice_tests.cpp \
  test/descriptor_tests.cpp \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_io_tests.cpp \
  test/key_tests.cpp \
  test/limitedmap_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/merkleblock_tests.cpp \
  test/miner_tests.cpp \
  test/multisig_tests.cpp \
  test/net_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/policyestimator_tests.cpp \
  test/pow_tests.cpp \
  test/prevector_tests.cpp \
  test/raii_event_tests.cpp \
  test/random_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_p2sh_tests.cpp \
  test/script_tests.cpp \
  test/script_standard_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/timedata_tests.cpp \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/txindex_tests.cpp \
  test/txvalidation_tests.cpp \
  test/txvalidationcache_tests.cpp \
  test/uint256_tests.cpp \
  test/util_tests.cpp \
  test/validation_block_tests.cpp \
  test/versionbits_tests.cpp

if ENABLE_WALLET
COMPCHAIN_TESTS += \
  wallet/test/accounting_tests.cpp \
  wallet/test/psbt_wallet_tests.cpp \
  wallet/test/wallet_tests.cpp \
  wallet/test/wallet_crypto_tests.cpp \
  wallet/test/coinselector_tests.cpp

COMPCHAIN_TEST_SUITE += \
  wallet/test/wallet_test_fixture.cpp \
  wallet/test/wallet_test_fixture.h
endif

test_test_compchain_SOURCES = $(COMPCHAIN_TEST_SUITE) $(COMPCHAIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_compchain_CPPFLAGS = $(AM_CPPFLAGS) $(COMPCHAIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)
test_test_compchain_LDADD =
if ENABLE_WALLET
test_test_compchain_LDADD += $(LIBCOMPCHAIN_WALLET)
endif

test_test_compchain_LDADD += $(LIBCOMPCHAIN_SERVER) $(LIBCOMPCHAIN_CLI) $(LIBCOMPCHAIN_COMMON) $(LIBCOMPCHAIN_UTIL) $(LIBCOMPCHAIN_CONSENSUS) $(LIBCOMPCHAIN_CRYPTO) $(LIBUNIVALUE) \
  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)
test_test_compchain_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

test_test_compchain_LDADD += $(LIBCOMPCHAIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
test_test_compchain_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_compchain_LDADD += $(ZMQ_LIBS)
endif
#

# test_compchain_fuzzy binary #
test_test_compchain_fuzzy_SOURCES = test/test_compchain_fuzzy.cpp
test_test_compchain_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(COMPCHAIN_INCLUDES)
test_test_compchain_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
test_test_compchain_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

test_test_compchain_fuzzy_LDADD = \
  $(LIBUNIVALUE) \
  $(LIBCOMPCHAIN_SERVER) \
  $(LIBCOMPCHAIN_COMMON) \
  $(LIBCOMPCHAIN_UTIL) \
  $(LIBCOMPCHAIN_CONSENSUS) \
  $(LIBCOMPCHAIN_CRYPTO) \
  $(LIBCOMPCHAIN_CRYPTO_SSE41) \
  $(LIBCOMPCHAIN_CRYPTO_AVX2) \
  $(LIBCOMPCHAIN_CRYPTO_SHANI) \
  $(LIBSECP256K1)

test_test_compchain_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)
#

nodist_test_test_compchain_SOURCES = $(GENERATED_TEST_FILES)

$(COMPCHAIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_COMPCHAIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_COMPCHAIN_TEST)

compchain_test: $(TEST_BINARY)

compchain_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

compchain_test_clean : FORCE
	rm -f $(CLEAN_COMPCHAIN_TEST) $(test_test_compchain_OBJECTS) $(TEST_BINARY)

check-local: $(COMPCHAIN_TESTS:.cpp=.cpp.test)
	@echo "Running test/util/compchain-util-test.py..."
	$(PYTHON) $(top_builddir)/test/util/compchain-util-test.py
	@echo "Running test/util/rpcauth-test.py..."
	$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
if EMBEDDED_UNIVALUE
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check
endif

%.cpp.test: %.cpp
	@echo Running tests: `cat $< | grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1` from $<
	$(AM_V_at)$(TEST_BINARY) -l test_suite -t "`cat $< | grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1`" > $<.log 2>&1 || (cat $<.log && false)

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace json_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"
